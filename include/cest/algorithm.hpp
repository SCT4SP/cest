#ifndef _CEST_ALGORITHM_HPP_
#define _CEST_ALGORITHM_HPP_

#include <algorithm>

namespace cest {

using std::adjacent_find;
using std::all_of;
using std::any_of;
using std::binary_search;
using std::copy;
using std::copy_backward;
using std::copy_if;
using std::copy_n;
using std::count;
using std::count_if;
using std::equal;
using std::equal_range;
using std::fill;
using std::fill_n;
using std::find;
using std::find_end;
using std::find_first_of;
using std::find_if;
using std::find_if_not;
using std::for_each;
using std::generate;
using std::generate_n;
using std::includes;
using std::inplace_merge;
using std::is_heap;
using std::is_heap_until;
using std::is_partitioned;
using std::is_permutation;
using std::is_sorted;
using std::is_sorted_until;
using std::iter_swap;
using std::lexicographical_compare;
using std::lower_bound;
using std::make_heap;
using std::max;
using std::max_element;
using std::merge;
using std::min;
using std::min_element;
using std::minmax;
using std::minmax_element;
using std::mismatch;
using std::move;
using std::move_backward;
using std::next_permutation;
using std::none_of;
using std::nth_element;
using std::partial_sort;
using std::partial_sort_copy;
using std::partition;
using std::partition_copy;
using std::partition_point;
using std::pop_heap;
using std::prev_permutation;
using std::push_heap;
using std::remove;
using std::remove_copy;
using std::remove_copy_if;
using std::remove_if;
using std::replace;
using std::replace_copy;
using std::replace_copy_if;
using std::replace_if;
using std::reverse;
using std::reverse_copy;
using std::rotate;
using std::rotate_copy;
using std::search;
using std::search_n;
using std::set_difference;
using std::set_intersection;
using std::set_symmetric_difference;
using std::set_union;
using std::shuffle;
using std::sort;
using std::sort_heap;
using std::stable_partition;
using std::stable_sort;
using std::swap_ranges;
using std::transform;
using std::unique;
using std::unique_copy;
using std::upper_bound;

} // namespace cest

#endif // _CEST_ALGORITHM_HPP_
